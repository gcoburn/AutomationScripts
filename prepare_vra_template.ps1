#==============================================
# Generated On: 03/01/2016
# Generated By: Gary Coburn
# Automation Specialist
# Organization: VMware
# Twitter: @coburnGary
# GuestAgent install script v2
#==============================================
#----------------------------------------------
#==================USAGE=======================
# Only tested and for use on Windows 2008 R2 and 2012 R2 Server
#----------------------------------------------
#===============REQUIREMENTS ===================
# For this script to run successfully be sure:
# 	To run PowerShell as administrator
#	  To have admin rights on the server
#
#   .NET framework 3.5 is a requirement for this script
#   If this is windows 2008 please pre-install and reboot
#
#----------------------------------------------

    param(
      [string]$vRAurl="",
      [string]$IaaS="",
      [string]$Password=""
    )

# ----------------------------------------
#   USER CONFIGURATION - EDIT AS NEEDED
# ----------------------------------------

# If this is unattended then these will be set by the parameters
# Otherwise you can preset these for run time or simply answer the prompts

# $vRAurl = "virtual_appliance_hostname.fqdn"
# $IaaS = "windows_server_hostname.fqdn"
# $Password = "password"

# ----------------------------------------
# 		END OF USER CONFIGURATION
# ----------------------------------------

# ------------------------------------
#           Log file start
# ----------------------------------
# Creating Directory and Log file path
New-Item -ItemType Directory -Force -Path C:\opt
"Starting the log file" | Out-file -FilePath C:\opt\agentinstall.txt | Write-Host

# ----------------------------------------
# 		CHECK POWERSHELL SESSION
# ----------------------------------------
$Elevated = New-Object Security.Principal.WindowsPrincipal( [Security.Principal.WindowsIdentity]::GetCurrent() )
& {
    if ($Elevated.IsInRole( [Security.Principal.WindowsBuiltInRole]::Administrator ))
    {
        "PowerShell is running as an administrator." | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
    } Else {
        "Powershell must be run as an adminstrator." | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
		throw "Powershell must be run as an adminstrator."
	}
    if( $ENV:Processor_architecture -eq "AMD64" )
    {
      "You are running 64-bit PowerShell" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
    }
    else
    {
      "You are running 32-bit PowerShell" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Red
      throw "This script must exit as Windows 32 bit isn't supported."
    }
}
# ----------------------------------------
# 		END OF POWERSHELL CHECK
# ----------------------------------------

# ---------------------------------------
#      Check .NET Framework  Version
# ---------------------------------------
$framework=(Get-ChildItem -Path $Env:windir\Microsoft.NET\Framework | Where-Object {$_.PSIsContainer -eq $true } | Where-Object {$_.Name -match 'v\d\.\d'} | Sort-Object -Property Name -Descending | Select-Object -First 1).Name -split "v"
write-host $framework
if ($framework -gt "3.0.0")
{
    ".NET 3.5 features have been verified" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
}
else
{
    ".NET 3.5 doesn't appear to be installed" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Red
}
# ----------------------------------------
# 		END OF .NET CHECK
# ----------------------------------------

# ---------------------------------------
#      Check Operating System Version
# ---------------------------------------
$os = (get-WMiObject -class Win32_OperatingSystem).caption
"OS = $os" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green

# Overwrite $OS variable with smaller string
if ( $os -like "*2008 R2*" )
{
	$os = "2008"
    "OS = $os" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
    if ($framework -le "3.0.0")
    {
        "Windows 2008 without .NET Framework 3.5 installed will require a reboot, run Import-Module ServerManager and Add-WindowsFeature as-net-framework then re-execute this script" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Red
        Throw "This script must exit please manually install .NET framework and re-execute. Review the log file c:\opt\agentinstall.txt for more info"
    }
}
elseif ( $os -like "*2012 R2*" )
{
	$os = "2012"
    "OS = $os" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
    if ($framework -le "3.0.0")
    {
        "Adding .NET 3.5 features" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
        Install-WindowsFeature -name NET-Framework-Core
        ".NET 3.5 features installed" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
    }
}
else
{
    "OS = $os is not supported please execute against Windows 2008 or 2012 R2 only!" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Red
     Throw "This script must exit due to unsupported operating system. Review the log file c:\opt\agentinstall.txt for more info"
}
# ----------------------------------------
# 		END OF OS CHECK
# ----------------------------------------


# ----------------------------------------
# 		Defining the Functions for download and extraction
# ----------------------------------------
#Download function called to pull the files
function downloadNeededFiles($url,$file)
{
    "$file Downloading" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
    [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
    $clnt = New-Object System.Net.WebClient
    $clnt.DownloadFile($url,$file)
    "$file Downloaded" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
}

#Extract the zip files downloaded
function extractZip($file,$dest)
{
    "$file extracting files" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
    $shell = new-object -com shell.application
    if (!(Test-Path "$file"))
    {
        throw "$file does not exist"
    }
    New-Item -ItemType Directory -Force -Path $dest -WarningAction SilentlyContinue
    $shell.namespace($dest).copyhere($shell.namespace("$file").items())
    "$file extracted" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
}
# ----------------------------------------
# 		END OF Functions
# ----------------------------------------


# ----------------------------------------
# 		Install Script
# ----------------------------------------

"Validating if the proper values are set" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
# Accept parameters if you are passing this via vRO
if (!$vRAurl) {
  "User configuration not set and no command line parameters detected " | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Red
  $vRAurl = read-Host -Prompt "What is the fqdn of your vRA Appliance? (vraServer.domain)  "
  $IaaS = read-Host -Prompt "What is fqdn of your IaaS Server? (ex. windowsServer.domain)  "
  $Password = read-Host -Prompt "What would you like the password for the darwin user to be?  "
}
"The following values have been set" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
"vRA Appliance is $vRAurl " | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
"IaaS server is $IaaS " | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
"Password is ******** " | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green

"Creating directory structure needed " | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
New-Item -ItemType Directory -Force -Path C:\opt\vmware-jre
New-Item -ItemType Directory -Force -Path C:\opt\bootstrap
"Directories Created " | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green

# Download and Extract the JRE components
"The URL specified is $vRAurl" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
"Downloading JRE zip" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
$url="https://" + $vRAurl + ":5480/service/software/download/jre-1.8.0_66-win64.zip"
"The full URL to your JRE file is $url" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
$file="c:\opt\jre.zip"
$dest="c:\opt\vmware-jre\"
# Call Download Function
downloadNeededFiles $url $file
# Call Extract Function
extractZip $file $dest

# Pull and execute the Guest Agent Installer
"Downloading Guest Agent" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
$url="https://" + $vRAurl + ":5480/installer/GuestAgentInstaller_x64.exe"
"The full URL to your GuestAgentInstaller file is $url" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
$file="c:\GuestAgentInstaller_x64.exe"
# Call Download Function
downloadNeededFiles $url $file
"Executing: $file" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
cd c:\
Start-Process C:\GuestAgentInstaller_x64.exe -Wait -PassThru
"$file Executed" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green

# Execute the winservice to put our Agent ready at start up
"The fqdn you specificed is $IaaS" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
$IaaSwithPort=$IaaS + ":443"
$argumentList = " -i -h $IaaSwithPort -p ssl"
"Command we run will be winservice.exe & $argumentList" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
cd c:\VRMGuestAgent
"Executing winservice" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
$winservicefile = ("winservice.exe")
$gugentInstall = Start-Process $winservicefile -ArgumentList $argumentList -Wait -PassThru
"Execution of winservice complete" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green

# Download and execute vRA bootstrap agent
"Downloading Bootstrap" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
cd C:\opt\bootstrap
$url="https://" + $vRAurl + ":5480/service/software/download/vmware-vra-software-agent-bootstrap-windows_7.0.0.0.zip"
"The full URL to your bootstrap file is $url" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
$file="c:\opt\bootstrap\bootstrap.zip"
$dest="c:\opt\bootstrap\"
# Call Download Function
downloadNeededFiles $url $file
# Call Extract Function
extractZip $file $dest

"Executing install.bat" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Yellow
$bootstrapFile = ("install.bat")
$argumentList = " password=$Password managerServiceHost=$IaaS cloudProvider=vsphere"
"Command we run will be install.bat & $argumentList" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
$bootstrapInstall = Start-Process $bootstrapFile -ArgumentList $argumentList -Wait | Out-File -FilePath C:\opt\AgentInstall.txt -Append
"Execution of install.bat complete" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green

"INSTALL COMPLETE! Ready for shutdown" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
# ----------------------------------------
# 		Install Script Complete
# ----------------------------------------


# ---------------------------------------
#       Cleaning up downloaded files
# ---------------------------------------
"Cleaning up downloaded files" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
"Deleting jre.zip" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
Remove-Item C:\opt\jre.zip
"Deleting guestagent.exe" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
Remove-Item C:\GuestAgentInstaller_x64.exe
"Deleting bootstrap.zip" | Out-file -FilePath C:\opt\agentinstall.txt -Append | Write-Host -ForegroundColor Green
Remove-Item C:\opt\bootstrap\bootstrap.zip
# ---------------------------------------
#       End cleaning files
# ---------------------------------------
